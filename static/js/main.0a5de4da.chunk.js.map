{"version":3,"sources":["utils/types.ts","utils/useLocalStorage.ts","utils/MainContext.tsx","styles/DifficultyButtons.styles.ts","components/DifficultyButtons.tsx","styles/Tiles.styles.ts","components/Tile.tsx","styles/ControlButtons.styles.ts","components/ControlButtons.tsx","styles/Timer.styles.ts","components/Timer.tsx","styles/theme.ts","utils/helpers.ts","components/GameTiles.tsx","styles/HighScores.styles.ts","components/HighScores.tsx","styles/ThemeToggle.styles.ts","components/ThemeToggle.tsx","styles/globalStyles.ts","styles/App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulties","Theme","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","MainContext","createContext","MainProvider","children","hasGameStarted","setHasGameStarted","hasGameEnded","setHasGameEnded","highScores","setHighScores","EASY","difficulty","setDifficulty","Provider","addNewScore","time","scores","push","sort","a","b","localeCompare","length","splice","Styled","Container","styled","div","theme","spacingS","Button","button","props","isActive","accent","text","buttons","label","val","MEDIUM","HARD","DifficultyButtons","useContext","map","btn","onClick","spacingM","TilesBackground","lightBackground","spacingXS","borderRadius","numberOfTiles","TilesContainer","TileContainer","Tile","Front","Back","background","Message","p","fontThin","id","isTurned","isDone","handleTileClick","showTiles","className","ControlButtons","resetGame","disabled","Time","h2","Timer","setTime","stopWatch","useRef","useEffect","current","setInterval","clearInterval","getFormatedTime","withoutHours","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","fontFamily","spacingXXS","spacingL","spacingXL","fontRegular","fontMedium","fontBold","fontBlack","gameColors","red","pink","purple","deepPurple","indigo","blue","cyan","teal","green","yellow","orange","brown","grey","blueGrey","black","lightTheme","lightText","buttonText","darkTheme","generateTilesColors","tilesNumber","shuffleArray","color","hex","hasOwnProperty","arr","random","getDifficultyLabel","GameTiles","setTilesNumber","tiles","setTiles","activeTiles","setActiveTiles","setShowTiles","tileId","endGame","colors","i","createTiles","timer","setTimeout","newTiles","tile","clearTimeout","includes","tile1","find","tile2","every","Boolean","aside","Title","h4","List","ul","ListItem","li","HighScores","score","ThemeLabel","h5","ToggleSwitch","ToggleLabel","Checkbox","input","Slider","span","ThemeToggle","setTheme","type","onChange","e","target","checked","DARK","LIGHT","GlobalStyles","createGlobalStyle","MainTitle","h1","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a5de4da.chunk.js","sourcesContent":["export enum Difficulties {\n  EASY = 12,\n  MEDIUM = 20,\n  HARD = 30\n}\n\nexport enum Theme {\n  LIGHT = 'LIGHT',\n  DARK = 'DARK'\n}\nexport interface TileProps {\n  id: number\n  background: string\n  isTurned: boolean\n  isDone: boolean\n  handleTileClick?: (id: number) => void\n  showTiles?: boolean\n}\n\nexport interface HighScoresProps {\n  time: string\n  difficulty: Difficulties\n}\n","import { useState } from 'react'\n\nexport const useLocalStorage = (key: string, initialValue: any) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      console.log(error)\n      return initialValue\n    }\n  })\n\n  const setValue = (value: any) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n      setStoredValue(valueToStore)\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n","import React, { useState, createContext } from 'react'\nimport { Difficulties, HighScoresProps } from './types'\nimport { useLocalStorage } from './useLocalStorage'\n\ninterface MainContextState {\n  hasGameStarted: boolean\n  hasGameEnded: boolean\n  setHasGameStarted: React.Dispatch<React.SetStateAction<boolean>>\n  setHasGameEnded: React.Dispatch<React.SetStateAction<boolean>>\n  highScores: HighScoresProps[]\n  addNewScore: (time: string, difficulty: Difficulties) => void\n  difficulty: Difficulties\n  setDifficulty: React.Dispatch<React.SetStateAction<Difficulties>>\n}\n\nexport const MainContext = createContext<MainContextState>(\n  {} as MainContextState\n)\n\nexport const MainProvider = ({ children }: { children: React.ReactNode }) => {\n  const [hasGameStarted, setHasGameStarted] = useState<boolean>(false)\n  const [hasGameEnded, setHasGameEnded] = useState<boolean>(false)\n\n  const [highScores, setHighScores] = useLocalStorage('HighScores', [])\n  const [difficulty, setDifficulty] = useLocalStorage(\n    'Difficulty',\n    Difficulties.EASY\n  )\n\n  const addNewScore = (time: string, difficulty: Difficulties) => {\n    let scores = highScores\n    scores.push({ time, difficulty })\n    scores.sort((a: HighScoresProps, b: HighScoresProps) =>\n      a.time.localeCompare(b.time)\n    )\n    if (scores.length >= 10) {\n      scores.splice(10, scores.length - 1)\n    }\n    setHighScores(scores)\n  }\n\n  return (\n    <MainContext.Provider\n      value={{\n        hasGameStarted,\n        hasGameEnded,\n        setHasGameStarted,\n        setHasGameEnded,\n        highScores,\n        addNewScore,\n        difficulty,\n        setDifficulty\n      }}\n    >\n      {children}\n    </MainContext.Provider>\n  )\n}\n","import styled from 'styled-components/macro'\n\ninterface ButtonProps {\n  isActive: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: ${({ theme }) => theme.spacingS};\n`\n\nconst Button = styled.button<ButtonProps>`\n  background-color: ${props =>\n    props.isActive ? props.theme.accent : props.theme.text};\n`\n\nexport const Styled = {\n  Container,\n  Button\n}\n","import React, { useContext } from 'react'\nimport { MainContext } from '../utils/MainContext'\nimport { Difficulties } from '../utils/types'\nimport { Styled } from '../styles/DifficultyButtons.styles'\n\nconst buttons = [\n  {\n    label: 'Easy',\n    val: Difficulties.EASY\n  },\n  {\n    label: 'Medium',\n    val: Difficulties.MEDIUM\n  },\n  {\n    label: 'Hard',\n    val: Difficulties.HARD\n  }\n]\n\nexport const DifficultyButtons: React.FC = () => {\n  const { difficulty, setDifficulty } = useContext(MainContext)\n\n  return (\n    <Styled.Container>\n      {buttons.map(btn => (\n        <Styled.Button\n          key={btn.label}\n          isActive={difficulty === btn.val}\n          onClick={() => setDifficulty(btn.val)}\n        >\n          {btn.label}\n        </Styled.Button>\n      ))}\n    </Styled.Container>\n  )\n}\n","import styled from 'styled-components/macro'\n\ninterface ContainerProps {\n  numberOfTiles: number\n}\n\ninterface BackProps {\n  background: string\n}\n\nconst Container = styled.div`\n  margin-top: ${({ theme }) => theme.spacingM};\n  text-align: center;\n\n  @media only screen and (max-width: 750px) {\n    font-size: 90%;\n  }\n  @media only screen and (max-width: 650px),\n    only screen and (max-height: 1050px) {\n    font-size: 75%;\n  }\n  @media only screen and (max-width: 550px) {\n    font-size: 60%;\n  }\n  @media only screen and (max-width: 450px) {\n    font-size: 45%;\n  }\n  @media only screen and (max-width: 315px) {\n    font-size: 38%;\n  }\n`\n\nconst TilesBackground = styled.div<ContainerProps>`\n  display: inline-block;\n  position: relative;\n  background: ${({ theme }) => theme.lightBackground};\n  padding: ${({ theme }) => theme.spacingXS};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  min-width: ${props =>\n    props.numberOfTiles === 20\n      ? '54em'\n      : props.numberOfTiles === 30\n      ? '67em'\n      : '41em'};\n  min-height: ${props =>\n    props.numberOfTiles === 20\n      ? '67em'\n      : props.numberOfTiles === 30\n      ? '80em'\n      : '54em'};\n`\n\nconst TilesContainer = styled.div<ContainerProps>`\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: ${props =>\n    props.numberOfTiles === 20\n      ? '1fr 1fr 1fr 1fr'\n      : props.numberOfTiles === 30\n      ? '1fr 1fr 1fr 1fr 1fr'\n      : '1fr 1fr 1fr'};\n`\n\nconst TileContainer = styled.div`\n  position: relative;\n  width: 12em;\n  height: 12em;\n  border-radius: 4px;\n  perspective: 900px;\n  background-color: transparent;\n\n  &.done:after {\n    content: '✔';\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    background: rgba(0, 0, 0, 0.15);\n    color: #fff;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 5em;\n  }\n`\n\nconst Tile = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transition: all 0.7s;\n  transform-style: preserve-3d;\n\n  &.active {\n    transform: rotateY(-180deg);\n  }\n\n  &:not(.active)  {\n    cursor: pointer;\n  }\n`\n\nconst Front = styled.div`\n  background: url('/tile.png');\n  background-size: cover;\n  background-position: center center;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  border-radius: 4px;\n  box-shadow: 0 7px 11px rgba(0, 0, 0, 0.14);\n`\n\nconst Back = styled.div<BackProps>`\n  background: ${props => props.background};\n  transform: rotateY(-180deg);\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  border-radius: ${({ theme }) => theme.borderRadius};\n  box-shadow: 0 7px 11px rgba(0, 0, 0, 0.14);\n`\n\nconst Message = styled.p`\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n  text-align: center;\n  color: ${({ theme }) => theme.text};\n  font-size: 1.9rem;\n  line-height: 3.2rem;\n  font-weight: ${({ theme }) => theme.fontThin};\n  padding: 0 ${({ theme }) => theme.spacingXS};\n`\n\nexport const Styled = {\n  Container,\n  TilesBackground,\n  TilesContainer,\n  TileContainer,\n  Tile,\n  Front,\n  Back,\n  Message\n}\n","import React from 'react'\nimport { TileProps } from '../utils/types'\nimport { Styled } from '../styles/Tiles.styles'\n\nexport const Tile: React.FC<TileProps> = ({\n  id,\n  background,\n  isTurned,\n  isDone,\n  handleTileClick,\n  showTiles\n}) => {\n  return (\n    <Styled.TileContainer\n      onClick={() => handleTileClick && showTiles && handleTileClick(id)}\n      className={isDone ? 'done' : ''}\n    >\n      <Styled.Tile className={isTurned || isDone ? 'active' : ''}>\n        <Styled.Front></Styled.Front>\n        <Styled.Back background={background}></Styled.Back>\n      </Styled.Tile>\n    </Styled.TileContainer>\n  )\n}\n","import styled from 'styled-components/macro'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: ${({ theme }) => theme.spacingS};\n`\n\nconst Button = styled.button``\n\nexport const Styled = {\n  Container,\n  Button\n}\n","import React, { useContext } from 'react'\nimport { MainContext } from '../utils/MainContext'\nimport { Styled } from '../styles/ControlButtons.styles'\n\ninterface ControlButtonsProps {\n  resetGame: () => void\n}\n\nexport const ControlButtons: React.FC<ControlButtonsProps> = ({\n  resetGame\n}) => {\n  const { hasGameStarted, setHasGameStarted } = useContext(MainContext)\n\n  return (\n    <Styled.Container>\n      <Styled.Button\n        onClick={() => setHasGameStarted(true)}\n        disabled={hasGameStarted}\n      >\n        Start\n      </Styled.Button>\n      <Styled.Button onClick={resetGame} disabled={!hasGameStarted}>\n        Reset\n      </Styled.Button>\n    </Styled.Container>\n  )\n}\n","import styled from 'styled-components/macro'\n\nconst Container = styled.div`\n  text-align: center;\n  margin-top: ${({ theme }) => theme.spacingS};\n`\nconst Time = styled.h2`\n  font-size: 4rem;\n  font-weight: 200;\n  color: ${({ theme }) => theme.text};\n`\n\nexport const Styled = {\n  Container,\n  Time\n}\n","import React, { useState, useEffect, useRef, useContext } from 'react'\nimport { MainContext } from '../utils/MainContext'\nimport { Styled } from '../styles/Timer.styles'\n\nexport const Timer: React.FC = () => {\n  const [time, setTime] = useState(0)\n\n  const { hasGameEnded, difficulty, addNewScore } = useContext(MainContext)\n\n  let stopWatch = useRef<any>(null)\n\n  useEffect(() => {\n    stopWatch.current = setInterval(() => {\n      setTime(time => time + 1)\n    }, 1000)\n    return () => {\n      clearInterval(stopWatch.current)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (hasGameEnded) {\n      clearInterval(stopWatch.current)\n      addNewScore(getFormatedTime(true), difficulty)\n    }\n  }, [hasGameEnded])\n\n  const getFormatedTime = (withoutHours?: boolean) => {\n    const getSeconds = `0${time % 60}`.slice(-2)\n    const minutes = `${Math.floor(time / 60)}`\n    // @ts-ignore\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const getHours = `0${Math.floor(time / 3600)}`.slice(-2)\n    console.log(getHours)\n    return withoutHours\n      ? `${getMinutes} : ${getSeconds}`\n      : `${getHours} : ${getMinutes} : ${getSeconds}`\n  }\n\n  return (\n    <Styled.Container>\n      <Styled.Time>{getFormatedTime()}</Styled.Time>\n    </Styled.Container>\n  )\n}\n","import { DefaultTheme } from 'styled-components'\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme {\n    fontFamily: string\n    spacingXXS: string\n    spacingXS: string\n    spacingS: string\n    spacingM: string\n    spacingL: string\n    spacingXL: string\n    accent: string\n    background?: string\n    lightBackground?: string\n    text?: string\n    lightText?: string\n    buttonText?: string\n    fontThin: number\n    fontRegular: number\n    fontMedium: number\n    fontBold: number\n    fontBlack: number\n    borderRadius: string\n    gameColors: {}[]\n  }\n}\n\nexport const theme: DefaultTheme = {\n  fontFamily: \"'Noto Sans KR', sans-serif;\",\n  spacingXXS: '1rem',\n  spacingXS: '1.5rem',\n  spacingS: '3rem',\n  spacingM: '6rem',\n  spacingL: '9rem',\n  spacingXL: '12rem',\n  accent: '#18BEBE',\n  fontThin: 100,\n  fontRegular: 400,\n  fontMedium: 500,\n  fontBold: 700,\n  fontBlack: 900,\n  borderRadius: '4px',\n  gameColors: [\n    { red: '#F44336' },\n    { pink: '#E91E63' },\n    { purple: '#9C27B0' },\n    { deepPurple: '#673AB7' },\n    { indigo: '#3F51B5' },\n    { blue: '#2196F3' },\n    { cyan: '#00BCD4' },\n    { teal: '#009688' },\n    { green: '#4CAF50' },\n    { yellow: '#FFEB3B' },\n    { orange: '#FF9800' },\n    { brown: '#795548' },\n    { grey: '#9E9E9E' },\n    { blueGrey: '#607D8B' },\n    { black: '#000000' }\n  ]\n}\n\nexport const lightTheme: DefaultTheme = {\n  ...theme,\n  background: '#F7F7F7',\n  lightBackground: '#FFFFFF',\n  text: '#484848',\n  lightText: '#5C5C5C',\n  buttonText: '#FFFFFF'\n}\n\nexport const darkTheme: DefaultTheme = {\n  ...theme,\n  background: '#262626',\n  lightBackground: '#363636',\n  text: '#FFFFFF',\n  lightText: '#F7F7F7',\n  buttonText: '#262626'\n}\n","import { theme } from '../styles/theme'\nimport { Difficulties } from './types'\n\nexport const createTiles = (tilesNumber: number) => {\n  const tiles = []\n  const colors = generateTilesColors(tilesNumber)\n\n  for (var i = 1; i <= tilesNumber; i++) {\n    tiles.push({\n      id: i,\n      background:\n        i > tilesNumber / 2 ? colors[i - tilesNumber / 2 - 1] : colors[i - 1],\n      isTurned: true,\n      isDone: false\n    })\n  }\n\n  return shuffleArray(tiles)\n}\n\nexport const generateTilesColors = (tilesNumber: number) => {\n  return shuffleArray(theme.gameColors)\n    .slice(0, tilesNumber / 2)\n    .map(color => {\n      let hex\n      for (var key in color) {\n        if (color.hasOwnProperty(key)) {\n          hex = color[key]\n        }\n      }\n      return hex\n    })\n}\n\nconst shuffleArray = (arr: any[]) => {\n  return arr\n    .map(a => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(a => a.value)\n}\n\nexport const getDifficultyLabel = (difficulty: Difficulties) => {\n  switch (difficulty) {\n    case Difficulties.MEDIUM:\n      return 'Medium'\n    case Difficulties.HARD:\n      return 'Hard'\n    default:\n      return 'Easy'\n  }\n}\n","import React, { useState, useEffect, useContext } from 'react'\nimport { Tile } from './Tile'\nimport { ControlButtons } from './ControlButtons'\nimport { Timer } from './Timer'\nimport { MainContext } from '../utils/MainContext'\nimport { Difficulties, TileProps } from '../utils/types'\nimport { createTiles } from '../utils/helpers'\nimport { Styled } from '../styles/Tiles.styles'\n\nexport const GameTiles: React.FC = () => {\n  const [tilesNumber, setTilesNumber] = useState<number>(Difficulties.EASY)\n  const [tiles, setTiles] = useState<TileProps[]>([])\n  const [activeTiles, setActiveTiles] = useState<number[]>([])\n  const [showTiles, setShowTiles] = useState<boolean>(false)\n\n  const { difficulty, hasGameStarted, setHasGameStarted, setHasGameEnded } =\n    useContext(MainContext)\n\n  const handleTileClick = (tileId: number) => {\n    if (activeTiles.length < 2 && hasGameStarted) {\n      setActiveTiles([...activeTiles, tileId])\n    }\n  }\n\n  const endGame = () => {\n    setHasGameStarted(false)\n    setHasGameEnded(false)\n    setShowTiles(false)\n    setTiles([])\n  }\n\n  const resetGame = () => {\n    endGame()\n    setTimeout(() => setHasGameStarted(true), 200)\n  }\n\n  // The 'difficulty' represents the number of tiles we want, so we'll store that on a useState hook\n  useEffect(() => {\n    setTilesNumber(difficulty)\n    endGame()\n  }, [difficulty])\n\n  // Generate the tiles, based on the number of tiles we want\n  useEffect(() => {\n    if (hasGameStarted) {\n      setTiles(createTiles(tilesNumber))\n    }\n  }, [tilesNumber, hasGameStarted])\n\n  // Using setTimeout we create a timer to initially show all the tiles and then hide them\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      if (tiles.length && !showTiles) {\n        const newTiles = tiles.map(tile => ({ ...tile, isTurned: false }))\n        setTiles(newTiles)\n        setShowTiles(true)\n      }\n    }, 2000)\n\n    return () => clearTimeout(timer)\n  }, [tiles, showTiles])\n\n  // When one of the tiles is clicked this useEffect will be triggered and we will show that tile\n  // If two tiles are clicked, we check to see if their colors match. If they do match, we'll mark them\n  // as 'done' and leave them turned up, otherwise we will turned them back down\n  useEffect(() => {\n    if (activeTiles.length) {\n      const newTiles = tiles.map(tile =>\n        activeTiles.includes(tile.id) ? { ...tile, isTurned: true } : tile\n      )\n      setTiles(newTiles)\n    }\n\n    if (activeTiles.length === 2) {\n      const tile1 = tiles.find(tile => tile.id === activeTiles[0])\n      const tile2 = tiles.find(tile => tile.id === activeTiles[1])\n\n      if (tile1?.background === tile2?.background && tile1?.id !== tile2?.id) {\n        const newTiles = tiles.map(tile =>\n          activeTiles.includes(tile.id) ? { ...tile, isDone: true } : tile\n        )\n        setTimeout(() => setTiles(newTiles), 200)\n        setActiveTiles([])\n      } else {\n        let timer = setTimeout(() => {\n          const newTiles = tiles.map(tile => ({ ...tile, isTurned: false }))\n          setTiles(newTiles)\n          setActiveTiles([])\n        }, 1000)\n        return () => clearTimeout(timer)\n      }\n    }\n  }, [activeTiles])\n\n  // If all tiles are marked as 'done' we'll finish the game\n  useEffect(() => {\n    if (tiles.length && tiles.every(tile => tile.isDone)) {\n      setHasGameEnded(true)\n    }\n  }, [tiles])\n\n  return (\n    <Styled.Container>\n      <Styled.TilesBackground numberOfTiles={tilesNumber}>\n        {Boolean(tiles.length) ? (\n          <Styled.TilesContainer numberOfTiles={tilesNumber}>\n            {tiles.map(tile => (\n              <Tile\n                key={tile.id}\n                id={tile.id}\n                background={tile.background}\n                isTurned={tile.isTurned}\n                isDone={tile.isDone}\n                handleTileClick={handleTileClick}\n                showTiles={showTiles}\n              />\n            ))}\n          </Styled.TilesContainer>\n        ) : (\n          <Styled.Message>\n            Match the tiles that have the same color.\n            <br /> Press 'Start' to start the game.\n          </Styled.Message>\n        )}\n      </Styled.TilesBackground>\n\n      {Boolean(tiles.length) && hasGameStarted && <Timer />}\n\n      <ControlButtons resetGame={resetGame} />\n    </Styled.Container>\n  )\n}\n","import styled from 'styled-components/macro'\n\nconst Container = styled.aside`\n  position: absolute;\n  top: 7rem;\n  right: ${({ theme }) => theme.spacingM};\n\n  @media only screen and (max-width: 900px) {\n    position: unset;\n    text-align: center;\n    margin-top: ${({ theme }) => theme.spacingM};\n  }\n`\n\nconst Title = styled.h4`\n  font-size: 1.6rem;\n`\n\nconst List = styled.ul`\n  list-style-type: none;\n  margin-top: ${({ theme }) => theme.spacingXS};\n`\nconst ListItem = styled.li`\n  font-size: 1.3rem;\n  font-weight: 200;\n  background-color: ${({ theme }) => theme.lightBackground};\n  padding: ${({ theme }) => theme.spacingXXS} ${({ theme }) => theme.spacingXS};\n  margin: ${({ theme }) => theme.spacingXS} 0;\n  text-align: center;\n  border-radius: ${({ theme }) => theme.borderRadius};\n`\n\nexport const Styled = {\n  Container,\n  Title,\n  List,\n  ListItem\n}\n","import React, { useContext } from 'react'\nimport { MainContext } from '../utils/MainContext'\nimport { getDifficultyLabel } from '../utils/helpers'\nimport { HighScoresProps } from '../utils/types'\nimport { Styled } from '../styles/HighScores.styles'\n\nexport const HighScores: React.FC = () => {\n  const { highScores } = useContext(MainContext)\n\n  return Boolean(highScores.length) ? (\n    <Styled.Container>\n      <Styled.Title>Your best scores</Styled.Title>\n      <Styled.List>\n        {highScores.map((score: HighScoresProps, i: number) => (\n          <Styled.ListItem key={i}>\n            {score.time} <span>({getDifficultyLabel(score.difficulty)})</span>\n          </Styled.ListItem>\n        ))}\n      </Styled.List>\n    </Styled.Container>\n  ) : null\n}\n","import styled from 'styled-components/macro'\n\nconst Container = styled.div`\n  position: absolute;\n  top: ${({ theme }) => theme.spacingS};\n  left: ${({ theme }) => theme.spacingS};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  @media only screen and (max-width: 900px) {\n    top: 2rem;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n`\n\nconst ThemeLabel = styled.h5`\n  text-transform: uppercase;\n  font-size: 1.2rem;\n  font-weight: ${({ theme }) => theme.fontRegular};\n  color: ${({ theme }) => theme.text};\n  letter-spacing: 0.04rem;\n`\n\nconst ToggleSwitch = styled.div`\n  margin: 0 ${({ theme }) => theme.spacingXS};\n\n  input:checked + span:before {\n    transform: translateX(2.8rem);\n  }\n`\n\nconst ToggleLabel = styled.label`\n  position: relative;\n  display: inline-block;\n  width: 5.5rem;\n  height: 2.4rem;\n`\n\nconst Checkbox = styled.input`\n  opacity: 0;\n  width: 0;\n  height: 0;\n`\nconst Slider = styled.span`\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  border: 2px solid ${({ theme }) => theme.text};\n  border-radius: 34px;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n\n  &:before {\n    position: absolute;\n    content: '';\n    height: 1.4rem;\n    width: 1.4rem;\n    left: 0.5rem;\n    bottom: 0.3rem;\n    background-color: ${({ theme }) => theme.text};\n    border-radius: 50%;\n    -webkit-transition: 0.4s;\n    transition: 0.4s;\n  }\n`\n\nexport const Styled = {\n  Container,\n  ThemeLabel,\n  ToggleSwitch,\n  ToggleLabel,\n  Checkbox,\n  Slider\n}\n","import React from 'react'\nimport { Theme } from '../utils/types'\nimport { Styled } from '../styles/ThemeToggle.styles'\n\ninterface ThemeToggleProps {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nexport const ThemeToggle: React.FC<ThemeToggleProps> = ({\n  theme,\n  setTheme\n}) => {\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setTheme(e.target.checked ? Theme.DARK : Theme.LIGHT)\n\n  return (\n    <Styled.Container>\n      <Styled.ThemeLabel>Light</Styled.ThemeLabel>\n      <Styled.ToggleSwitch>\n        <Styled.ToggleLabel>\n          <Styled.Checkbox\n            type=\"checkbox\"\n            onChange={handleChange}\n            checked={theme === Theme.DARK}\n          />\n          <Styled.Slider></Styled.Slider>\n        </Styled.ToggleLabel>\n      </Styled.ToggleSwitch>\n      <Styled.ThemeLabel>Dark</Styled.ThemeLabel>\n    </Styled.Container>\n  )\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyles = createGlobalStyle`\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n    \n    html {\n        font-size: 62.5%;\n\n        @media only screen and (max-width: 375px) {\n            font-size: 53.5%;\n        }\n    }\n\n    body {\n        font-family: ${({ theme }) => theme.fontFamily};\n        background: ${({ theme }) => theme.background};\n        color: ${({ theme }) => theme.text};\n    }\n\n    button {\n        border: none;\n        box-shadow: none;\n        padding: ${({ theme }) => theme.spacingXS};\n        min-width: 11rem;\n        margin: .5rem ${({ theme }) => theme.spacingXS};\n        border-radius: ${({ theme }) => theme.borderRadius};\n        background: ${({ theme }) => theme.text};\n        color: ${({ theme }) => theme.buttonText};\n        font-size: 1.6rem;\n        font-weight: ${({ theme }) => theme.fontMedium};\n        letter-spacing: .06rem;\n        cursor: pointer;\n        transition: all .25s ease;\n\n        &:disabled {\n            cursor:not-allowed;\n            opacity: .75;\n        }\n\n        &:not(:disabled):hover {\n            background-color: ${({ theme }) => theme.accent};\n        }\n    }\n`\n","import styled from 'styled-components/macro'\n\nconst Container = styled.div`\n  padding: ${({ theme }) => theme.spacingM} ${({ theme }) => theme.spacingS};\n`\n\nconst MainTitle = styled.h1`\n  font-size: 2.4rem;\n  font-weight: ${({ theme }) => theme.fontBlack};\n  text-align: center;\n`\n\nexport const Styled = {\n  Container,\n  MainTitle\n}\n","import React from 'react'\nimport { DifficultyButtons } from './components/DifficultyButtons'\nimport { GameTiles } from './components/GameTiles'\nimport { HighScores } from './components/HighScores'\nimport { ThemeToggle } from './components/ThemeToggle'\nimport { MainProvider } from './utils/MainContext'\nimport { useLocalStorage } from './utils/useLocalStorage'\nimport { Theme } from './utils/types'\nimport { GlobalStyles } from './styles/globalStyles'\nimport { lightTheme, darkTheme } from './styles/theme'\nimport { Styled } from './styles/App.styles'\nimport { ThemeProvider } from 'styled-components'\n\nconst App: React.FC = () => {\n  const [theme, setTheme] = useLocalStorage('Theme', Theme.DARK)\n\n  return (\n    <ThemeProvider theme={theme === Theme.LIGHT ? lightTheme : darkTheme}>\n      <GlobalStyles />\n\n      <MainProvider>\n        <Styled.Container>\n          <ThemeToggle theme={theme} setTheme={setTheme} />\n          <Styled.MainTitle>Memory Game</Styled.MainTitle>\n          <DifficultyButtons />\n          <GameTiles />\n          <HighScores />\n        </Styled.Container>\n      </MainProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}